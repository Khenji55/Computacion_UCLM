import java_cup.runtime.*;
import java.io.*;

parser code {:
  public static void main(String args[]) throws Exception {
    try{
      new parser(new Yylex(System.in)).parse();  // Inicializamos el scanner (Yylex) para que
    }
    catch ( Exception e) {
      System.out.println( e );
      System.out.println(" Análisis INCORRECTO !!");
      System.exit(1);
    }
    System.out.println("Análisis Correcto ");
   }
:}



terminal CORCHETE_ABIERTO, CORCHETE_CERRADO, COMA, PUNTO_Y_COMA, ASIGNADOR, UNION, PALABRA_VACIA;
terminal GRAMATICA, TERMINAL, NO_TERMINAL, AXIOMA, PRODUCCION;
terminal TEXTO;

non terminal lista_simbolos_espacio, lista_simbolos_coma, union_lista_simbolos;
non terminal regla_produccion, lista_reglas_produccion;
non terminal term_p, no_term_p, axioma_p, produccion_p;
non terminal term, no_term, axioma, produccion;
non terminal gramat;

precedence left COMA;
precedence left UNION;
precedence left ASIGNADOR;

gramat ::= GRAMATICA TEXTO CORCHETE_ABIERTO
   term_p
   no_term_p
   axioma_p
   produccion_p
   CORCHETE_CERRADO;

term_p ::= term PUNTO_Y_COMA;
no_term_p ::= no_term PUNTO_Y_COMA;
axioma_p ::= axioma PUNTO_Y_COMA;
produccion_p ::= produccion;

term ::= TERMINAL lista_simbolos_coma;
no_term ::= NO_TERMINAL lista_simbolos_coma;
axioma ::= AXIOMA TEXTO;
produccion ::= PRODUCCION CORCHETE_ABIERTO lista_reglas_produccion CORCHETE_CERRADO;

regla_produccion::= TEXTO ASIGNADOR union_lista_simbolos PUNTO_Y_COMA;
lista_reglas_produccion::= lista_reglas_produccion regla_produccion | regla_produccion;

lista_simbolos_espacio ::= lista_simbolos_espacio TEXTO | TEXTO;
lista_simbolos_coma ::= lista_simbolos_coma COMA TEXTO | TEXTO;
union_lista_simbolos ::= union_lista_simbolos UNION lista_simbolos_espacio |
                         union_lista_simbolos UNION PALABRA_VACIA |
                         lista_simbolos_espacio;
