/* The following code was generated by JFlex 1.4.3 on 3/25/15 10:27 AM */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/25/15 10:27 AM from the specification file
 * <tt>compilador.fle</tt>
 */
class compilador {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int automata = 2;
  public static final int YYINITIAL = 0;
  public static final int transition = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  5,  0,  4,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  2,  0, 24,  0,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0, 
     0,  7, 19,  1,  1, 15, 21,  1, 18, 20,  1,  1, 16, 11, 12, 10, 
    17,  1, 22, 14,  9,  8,  1,  1,  1,  1,  1, 13,  0, 23,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\6\1\1\3\2\1\1\4\20\0"+
    "\1\5\44\0\1\6\6\0\1\7\13\0\1\10\5\0"+
    "\1\11\1\12\2\0\1\13\21\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\62\0\113\0\113\0\144\0\175\0\226"+
    "\0\257\0\310\0\341\0\372\0\u0113\0\u012c\0\u0145\0\u015e"+
    "\0\u0177\0\u0190\0\u01a9\0\u01c2\0\u01db\0\u0113\0\u01f4\0\u020d"+
    "\0\u0226\0\u023f\0\u0258\0\u0271\0\u028a\0\u02a3\0\u02bc\0\u01f4"+
    "\0\u02d5\0\u02ee\0\u0307\0\u0320\0\u0339\0\u0352\0\u036b\0\u0384"+
    "\0\u039d\0\u03b6\0\u03cf\0\u03e8\0\u0401\0\u041a\0\u0433\0\u044c"+
    "\0\u0465\0\u047e\0\u0497\0\u04b0\0\u04c9\0\u04e2\0\u04fb\0\u0514"+
    "\0\u052d\0\u0546\0\u055f\0\u0578\0\u0591\0\u05aa\0\u05c3\0\u05dc"+
    "\0\u05f5\0\u060e\0\u0627\0\u0640\0\113\0\u0659\0\u0672\0\u068b"+
    "\0\u06a4\0\u06bd\0\u06d6\0\113\0\u06ef\0\u0708\0\u0721\0\u073a"+
    "\0\u0753\0\u076c\0\u0785\0\u079e\0\u07b7\0\u07d0\0\u07e9\0\113"+
    "\0\u0802\0\u081b\0\u0834\0\u084d\0\u0866\0\u087f\0\113\0\u0898"+
    "\0\u08b1\0\u08ca\0\u08e3\0\u08fc\0\u0915\0\144\0\u092e\0\226"+
    "\0\u0947\0\u0960\0\u0979\0\u0992\0\u09ab\0\u09c4\0\u09dd\0\u09f6"+
    "\0\u0a0f\0\u0a28\0\u0a41";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\5\4\1\5\1\4\1\6\26\4\1\5\1\4\1\7"+
    "\1\4\1\10\4\4\1\11\5\4\1\12\1\13\1\4"+
    "\1\14\2\4\1\15\3\4\1\5\1\4\1\16\5\15"+
    "\1\4\11\15\1\17\1\4\41\0\1\20\30\0\1\20"+
    "\7\0\1\21\36\0\1\22\13\0\1\23\33\0\1\24"+
    "\40\0\1\25\33\0\1\14\2\0\1\26\1\0\1\27"+
    "\2\0\1\30\6\26\1\0\11\26\3\0\1\26\1\0"+
    "\1\27\2\0\1\30\1\26\1\31\4\26\1\0\11\26"+
    "\31\0\1\17\12\0\1\32\40\0\1\33\16\0\1\34"+
    "\30\0\1\35\45\0\1\36\20\0\1\37\15\0\1\26"+
    "\5\0\6\26\1\0\11\26\32\0\1\40\1\0\1\26"+
    "\1\0\1\27\2\0\1\30\2\26\1\41\3\26\1\0"+
    "\11\26\14\0\1\42\40\0\1\43\22\0\1\44\25\0"+
    "\1\45\30\0\1\46\26\0\1\47\22\0\1\26\1\0"+
    "\1\27\2\0\1\30\3\26\1\50\2\26\1\0\11\26"+
    "\15\0\1\51\24\0\1\52\37\0\1\53\31\0\1\54"+
    "\35\0\1\55\24\0\1\56\11\0\1\26\1\0\1\27"+
    "\2\0\1\30\4\26\1\57\1\26\1\0\11\26\11\0"+
    "\1\60\44\0\1\61\31\0\1\62\22\0\1\63\21\0"+
    "\1\64\27\0\1\65\23\0\1\26\1\0\1\27\2\0"+
    "\1\30\1\66\5\26\1\0\11\26\13\0\1\67\36\0"+
    "\1\70\22\0\1\71\25\0\1\72\42\0\1\73\11\0"+
    "\1\74\5\0\6\74\1\0\7\74\1\75\1\74\3\0"+
    "\1\26\1\0\1\27\2\0\1\30\2\26\1\76\3\26"+
    "\1\0\11\26\14\0\1\77\27\0\1\100\43\0\1\101"+
    "\5\0\1\102\5\0\6\102\1\0\1\103\10\102\10\0"+
    "\1\104\23\0\1\74\1\105\1\106\3\0\6\74\1\0"+
    "\11\74\3\0\1\74\1\105\1\106\3\0\6\74\1\0"+
    "\6\74\1\107\2\74\3\0\1\26\1\0\1\27\2\0"+
    "\1\30\3\26\1\110\2\26\1\0\11\26\16\0\1\111"+
    "\22\0\1\112\34\0\1\113\17\0\1\102\1\114\1\115"+
    "\3\0\6\102\1\0\11\102\3\0\1\102\1\114\1\115"+
    "\3\0\2\102\1\116\3\102\1\0\11\102\3\0\1\117"+
    "\5\0\6\117\1\0\6\117\1\120\2\117\3\0\1\74"+
    "\5\0\6\74\1\0\11\74\3\0\1\74\1\105\1\106"+
    "\3\0\5\74\1\121\1\0\11\74\3\0\1\26\1\0"+
    "\1\27\2\0\1\30\5\26\1\122\1\0\11\26\3\0"+
    "\1\123\2\0\3\111\6\123\1\0\11\123\3\0\1\124"+
    "\5\0\1\125\5\124\1\0\11\124\16\0\1\126\15\0"+
    "\1\102\5\0\6\102\1\0\11\102\3\0\1\102\1\114"+
    "\1\115\3\0\1\127\5\102\1\0\11\102\3\0\1\117"+
    "\1\130\1\131\3\0\6\117\1\0\11\117\3\0\1\117"+
    "\1\130\1\131\3\0\5\117\1\132\1\0\11\117\3\0"+
    "\1\74\1\105\1\106\3\0\1\133\5\74\1\0\11\74"+
    "\3\0\1\134\1\0\1\27\2\111\1\135\6\134\1\0"+
    "\11\134\3\0\1\123\5\0\6\123\1\136\11\123\3\0"+
    "\1\124\1\137\1\140\3\0\6\124\1\0\11\124\3\0"+
    "\1\124\1\137\1\140\3\0\6\124\1\0\2\124\1\141"+
    "\6\124\17\0\1\142\14\0\1\102\1\114\1\115\3\0"+
    "\2\102\1\143\3\102\1\0\11\102\3\0\1\117\5\0"+
    "\6\117\1\0\11\117\3\0\1\117\1\130\1\131\3\0"+
    "\6\117\1\0\6\117\1\144\2\117\3\0\1\74\1\105"+
    "\1\106\3\0\6\74\1\0\2\74\1\145\6\74\3\0"+
    "\1\134\1\0\1\27\2\0\1\30\6\134\1\136\11\134"+
    "\3\0\1\123\2\0\3\111\6\123\1\0\11\123\1\0"+
    "\1\40\7\0\1\146\22\0\1\124\5\0\6\124\1\0"+
    "\11\124\3\0\1\124\1\137\1\140\3\0\6\124\1\0"+
    "\3\124\1\147\5\124\13\0\1\150\20\0\1\102\1\114"+
    "\1\115\3\0\6\102\1\0\1\102\1\151\7\102\3\0"+
    "\1\117\1\130\1\131\3\0\2\117\1\152\3\117\1\0"+
    "\11\117\3\0\1\74\1\105\1\106\2\0\1\65\6\74"+
    "\1\0\11\74\3\0\1\124\1\137\1\140\3\0\6\124"+
    "\1\0\4\124\1\153\4\124\3\0\1\102\1\114\1\115"+
    "\3\0\6\102\1\0\1\154\10\102\3\0\1\117\1\130"+
    "\1\131\3\0\6\117\1\0\6\117\1\155\2\117\3\0"+
    "\1\124\1\137\1\140\3\0\1\156\5\124\1\0\11\124"+
    "\3\0\1\102\1\114\1\115\2\0\1\72\6\102\1\0"+
    "\11\102\3\0\1\117\1\130\1\131\3\0\1\157\5\117"+
    "\1\0\11\117\3\0\1\124\1\137\1\140\3\0\6\124"+
    "\1\0\5\124\1\160\3\124\3\0\1\117\1\130\1\131"+
    "\3\0\6\117\1\0\2\117\1\161\6\117\3\0\1\124"+
    "\1\137\1\140\3\0\6\124\1\0\1\124\1\162\7\124"+
    "\3\0\1\117\1\130\1\131\2\0\1\104\6\117\1\0"+
    "\11\117\3\0\1\124\1\137\1\140\3\0\2\124\1\163"+
    "\3\124\1\0\11\124\3\0\1\124\1\137\1\140\2\0"+
    "\1\112\6\124\1\0\11\124\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2650];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\12\1\20\0\1\1\44\0\1\11\6\0"+
    "\1\11\13\0\1\11\5\0\1\1\1\11\2\0\1\1"+
    "\21\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public int cont;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  compilador(java.io.Reader in) {
  	cont=0;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  compilador(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	System.out.print("Naturales = "+cont);

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { System.out.println("estado a");
          }
        case 12: break;
        case 2: 
          { System.out.print(yytext());
          }
        case 13: break;
        case 6: 
          { System.out.println("final");
          }
        case 14: break;
        case 3: 
          { System.out.println("cierra automata");
	yybegin(YYINITIAL);
          }
        case 15: break;
        case 9: 
          { System.out.println("Dentro de automata");
yybegin(automata);
          }
        case 16: break;
        case 4: 
          { System.out.println("Cierra transition");
	yybegin(automata);
          }
        case 17: break;
        case 11: 
          { System.out.println("transition begins");
	yybegin(transition);
          }
        case 18: break;
        case 8: 
          { System.out.println("initial");
          }
        case 19: break;
        case 10: 
          { System.out.println("alphabet");
          }
        case 20: break;
        case 7: 
          { System.out.println("states");
          }
        case 21: break;
        case 1: 
          { 
          }
        case 22: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java compilador <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        compilador scanner = null;
        try {
          scanner = new compilador( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
